server:
  port: 9002
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

# Spring
spring:
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  datasource:
    url: jdbc:postgresql://localhost:5432/bookstoredb_order
    username: user
    password: password
  flyway:
    url: ${spring.datasource.url}
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}
  cloud:
    stream:
      bindings:
        acceptOrder-out-0:
          destination: order-accepted
        dispatchOrder-in-0:
          destination: order-dispatched
          group: ${spring.application.name}
      rabbit:
        bindings:
          acceptOrder-out-0:
            producer:
              transacted: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/bookstore
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: cT5pq7W3XStcuFVQMhjPbRj57Iqxcu4n
            scope: openid, roles
            authorization-grant-type: client_credentials
        provider:
          keycloak:
            token-uri: http://localhost:8080/realms/bookstore/protocol/openid-connect/token
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s

# Logging
logging:
  pattern:
    level: "%5p [${spring.application.name}, %X{trace_id},%X{span_id}]"

# Info system
info:
  system: Bookstore system
  env: Development

# Actuator
management:
  endpoints:
    web:
      exposure:
        include: info, health, env, flyway, loggers, mappings, prometheus
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
      show-components: always
  info:
    os:
      enabled: true
    java:
      enabled: true
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

bookstore:
  catalog-service-uri: "http://localhost:9001"